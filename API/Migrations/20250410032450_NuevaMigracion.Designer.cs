// <auto-generated />
using System;
using API.implementations.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250410032450_NuevaMigracion")]
    partial class NuevaMigracion
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("API.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c850356c-72e5-48e4-b4c4-4b8f4ea30001"),
                            CreatedAt = new DateTime(2025, 4, 10, 3, 24, 46, 434, DateTimeKind.Utc).AddTicks(9578),
                            Name = "Cámaras de Seguridad",
                            UpdatedAt = new DateTime(2025, 4, 10, 3, 24, 46, 434, DateTimeKind.Utc).AddTicks(9585)
                        },
                        new
                        {
                            Id = new Guid("7bc32edc-f075-4a37-9fd0-e4a5b107d368"),
                            CreatedAt = new DateTime(2025, 4, 10, 3, 24, 46, 435, DateTimeKind.Utc).AddTicks(755),
                            Name = "Alarmas",
                            UpdatedAt = new DateTime(2025, 4, 10, 3, 24, 46, 435, DateTimeKind.Utc).AddTicks(756)
                        },
                        new
                        {
                            Id = new Guid("daedbd41-43c5-4729-8fbd-ba6e4b3e2ecc"),
                            CreatedAt = new DateTime(2025, 4, 10, 3, 24, 46, 435, DateTimeKind.Utc).AddTicks(760),
                            Name = "Sensores",
                            UpdatedAt = new DateTime(2025, 4, 10, 3, 24, 46, 435, DateTimeKind.Utc).AddTicks(761)
                        });
                });

            modelBuilder.Entity("API.Models.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdRegion")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IdRegion");

                    b.ToTable("Cities", (string)null);
                });

            modelBuilder.Entity("API.Models.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("API.Models.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("IdUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IdUser");

                    b.ToTable("Customers", (string)null);
                });

            modelBuilder.Entity("API.Models.DeliveryAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdCity")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("StreetNameOptional")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("StreetNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("IdCity");

                    b.ToTable("DeliveryAddresses", (string)null);
                });

            modelBuilder.Entity("API.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdCustomer")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdDeliveryAddress")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdPayment")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IdCustomer");

                    b.HasIndex("IdDeliveryAddress");

                    b.HasIndex("IdPayment");

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("API.Models.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("CardHolderName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CardLastFour")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("CardType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("ExpirationDate")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ResponseCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Payments", (string)null);
                });

            modelBuilder.Entity("API.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<decimal>("Height")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<Guid>("IdCategory")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Length")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Weight")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Width")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("IdCategory");

                    b.ToTable("Products", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d2fe7d0c-d0f7-4539-a57b-3f1697b77118"),
                            CreatedAt = new DateTime(2025, 4, 10, 3, 24, 46, 436, DateTimeKind.Utc).AddTicks(6261),
                            Description = "Cámara de seguridad de alta definición con visión nocturna y grabación en 1080p. Conectividad Wi-Fi y detección de movimiento.",
                            Height = 10m,
                            IdCategory = new Guid("c850356c-72e5-48e4-b4c4-4b8f4ea30001"),
                            Length = 20m,
                            Name = "Cámara de Seguridad IP 1080p",
                            Price = 120.99m,
                            Stock = 50,
                            UpdatedAt = new DateTime(2025, 4, 10, 3, 24, 46, 436, DateTimeKind.Utc).AddTicks(6268),
                            Weight = 0.5m,
                            Width = 15m
                        },
                        new
                        {
                            Id = new Guid("33577b56-b564-4c23-a062-c666b0c220ff"),
                            CreatedAt = new DateTime(2025, 4, 10, 3, 24, 46, 437, DateTimeKind.Utc).AddTicks(1078),
                            Description = "Sistema de alarma inalámbrico con 4 zonas, ideal para viviendas. Compatible con sensores de puertas y ventanas.",
                            Height = 8m,
                            IdCategory = new Guid("7bc32edc-f075-4a37-9fd0-e4a5b107d368"),
                            Length = 25m,
                            Name = "Alarma Inalámbrica 4 Zonas",
                            Price = 150.50m,
                            Stock = 100,
                            UpdatedAt = new DateTime(2025, 4, 10, 3, 24, 46, 437, DateTimeKind.Utc).AddTicks(1079),
                            Weight = 1.2m,
                            Width = 20m
                        },
                        new
                        {
                            Id = new Guid("819c8ae2-a95b-4f1c-a376-dc733db0a9ce"),
                            CreatedAt = new DateTime(2025, 4, 10, 3, 24, 46, 437, DateTimeKind.Utc).AddTicks(1126),
                            Description = "Sensor de movimiento PIR (infrarrojo pasivo) para sistemas de alarma. Detecta movimiento en un rango de hasta 10 metros.",
                            Height = 6m,
                            IdCategory = new Guid("daedbd41-43c5-4729-8fbd-ba6e4b3e2ecc"),
                            Length = 12m,
                            Name = "Sensor de Movimiento PIR",
                            Price = 45.30m,
                            Stock = 0,
                            UpdatedAt = new DateTime(2025, 4, 10, 3, 24, 46, 437, DateTimeKind.Utc).AddTicks(1127),
                            Weight = 0.3m,
                            Width = 8m
                        },
                        new
                        {
                            Id = new Guid("e9b2a087-db87-4a92-9b9f-074cdc0430f0"),
                            CreatedAt = new DateTime(2025, 4, 10, 3, 24, 46, 437, DateTimeKind.Utc).AddTicks(1135),
                            Description = "Cámara dome 4K con visión panorámica y grabación en calidad ultra HD. Resistente a condiciones climáticas extremas.",
                            Height = 12m,
                            IdCategory = new Guid("c850356c-72e5-48e4-b4c4-4b8f4ea30001"),
                            Length = 18m,
                            Name = "Cámara de Seguridad Dome 4K",
                            Price = 299.99m,
                            Stock = 50,
                            UpdatedAt = new DateTime(2025, 4, 10, 3, 24, 46, 437, DateTimeKind.Utc).AddTicks(1136),
                            Weight = 0.8m,
                            Width = 15m
                        },
                        new
                        {
                            Id = new Guid("77d09223-94d7-4511-9bf2-67084b602560"),
                            CreatedAt = new DateTime(2025, 4, 10, 3, 24, 46, 437, DateTimeKind.Utc).AddTicks(1144),
                            Description = "Alarma de seguridad para puertas y ventanas. Ideal para prevenir accesos no autorizados en el hogar o negocio.",
                            Height = 5m,
                            IdCategory = new Guid("7bc32edc-f075-4a37-9fd0-e4a5b107d368"),
                            Length = 15m,
                            Name = "Alarma para Puerta/ ventana",
                            Price = 32.99m,
                            Stock = 200,
                            UpdatedAt = new DateTime(2025, 4, 10, 3, 24, 46, 437, DateTimeKind.Utc).AddTicks(1145),
                            Weight = 0.5m,
                            Width = 10m
                        },
                        new
                        {
                            Id = new Guid("b10610b5-8606-4b4c-a5be-81dc761bc9d8"),
                            CreatedAt = new DateTime(2025, 4, 10, 3, 24, 46, 437, DateTimeKind.Utc).AddTicks(1153),
                            Description = "Cámara de seguridad para exteriores, resistente al agua y con visión nocturna. Se conecta a través de Wi-Fi.",
                            Height = 10m,
                            IdCategory = new Guid("c850356c-72e5-48e4-b4c4-4b8f4ea30001"),
                            Length = 25m,
                            Name = "Cámara de Seguridad para Exteriores",
                            Price = 180.75m,
                            Stock = 30,
                            UpdatedAt = new DateTime(2025, 4, 10, 3, 24, 46, 437, DateTimeKind.Utc).AddTicks(1153),
                            Weight = 1.0m,
                            Width = 20m
                        });
                });

            modelBuilder.Entity("API.Models.ProductImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdProduct")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IdProduct");

                    b.ToTable("ProductImages", (string)null);
                });

            modelBuilder.Entity("API.Models.Region", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdCountry")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IdCountry");

                    b.ToTable("Regions", (string)null);
                });

            modelBuilder.Entity("API.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("API.Models.ShoppingCart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<Guid>("IdOrder")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdProduct")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IdOrder");

                    b.HasIndex("IdProduct");

                    b.HasIndex("OrderId");

                    b.ToTable("ShoppingCarts", (string)null);
                });

            modelBuilder.Entity("API.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("IdRole")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IdRole");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("API.Models.City", b =>
                {
                    b.HasOne("API.Models.Region", "Region")
                        .WithMany("Cities")
                        .HasForeignKey("IdRegion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("API.Models.Customer", b =>
                {
                    b.HasOne("API.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Models.DeliveryAddress", b =>
                {
                    b.HasOne("API.Models.City", null)
                        .WithMany("DeliveryAddresses")
                        .HasForeignKey("CityId");

                    b.HasOne("API.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("IdCity")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("API.Models.Order", b =>
                {
                    b.HasOne("API.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("IdCustomer")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API.Models.DeliveryAddress", "DeliveryAddress")
                        .WithMany()
                        .HasForeignKey("IdDeliveryAddress")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API.Models.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("IdPayment")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("DeliveryAddress");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("API.Models.Product", b =>
                {
                    b.HasOne("API.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("IdCategory")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Category");
                });

            modelBuilder.Entity("API.Models.ProductImage", b =>
                {
                    b.HasOne("API.Models.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("IdProduct")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Product");
                });

            modelBuilder.Entity("API.Models.Region", b =>
                {
                    b.HasOne("API.Models.Country", "Country")
                        .WithMany("Regions")
                        .HasForeignKey("IdCountry")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("API.Models.ShoppingCart", b =>
                {
                    b.HasOne("API.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("IdOrder")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("IdProduct")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API.Models.Order", null)
                        .WithMany("DeliveryAddresses")
                        .HasForeignKey("OrderId");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("API.Models.User", b =>
                {
                    b.HasOne("API.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("IdRole")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("API.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("API.Models.City", b =>
                {
                    b.Navigation("DeliveryAddresses");
                });

            modelBuilder.Entity("API.Models.Country", b =>
                {
                    b.Navigation("Regions");
                });

            modelBuilder.Entity("API.Models.Order", b =>
                {
                    b.Navigation("DeliveryAddresses");
                });

            modelBuilder.Entity("API.Models.Product", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("API.Models.Region", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("API.Models.Role", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
